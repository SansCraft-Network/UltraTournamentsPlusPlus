name: Development Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      custom_version:
        description: 'Custom version suffix (optional)'
        required: false
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  dev-release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip-release]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Generate version info
      id: version
      run: |
        BASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        COMMIT_SHORT=$(git rev-parse --short HEAD)
        BUILD_NUMBER=${{ github.run_number }}
        TIMESTAMP=$(date +'%Y%m%d%H%M')
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          DEV_VERSION="${BASE_VERSION}-${{ github.event.inputs.custom_version }}"
        else
          DEV_VERSION="${BASE_VERSION}-dev.${BUILD_NUMBER}.${COMMIT_SHORT}"
        fi
        
        echo "base-version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        echo "dev-version=${DEV_VERSION}" >> $GITHUB_OUTPUT
        echo "commit-short=${COMMIT_SHORT}" >> $GITHUB_OUTPUT
        echo "build-number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
    - name: Update version in pom.xml
      run: |
        mvn versions:set -DnewVersion=${{ steps.version.outputs.dev-version }} -DgenerateBackupPoms=false
        
    - name: Build release
      run: mvn clean package -DskipTests
      
    - name: Run tests
      run: mvn test
      continue-on-error: true
      
    - name: Get artifact info
      id: artifact
      run: |
        ARTIFACT_PATH=$(ls target/*.jar | grep -v original | head -1)
        ARTIFACT_NAME=$(basename "${ARTIFACT_PATH}")
        ARTIFACT_SIZE=$(stat -c%s "${ARTIFACT_PATH}" | numfmt --to=iec)
        
        echo "artifact-path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT
        echo "artifact-name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
        echo "artifact-size=${ARTIFACT_SIZE}" >> $GITHUB_OUTPUT
        
    - name: Generate comprehensive changelog
      id: changelog
      run: |
        # Get commits since last dev release
        LAST_DEV_TAG=$(git tag -l "dev-*" --sort=-version:refname | head -1)
        
        if [ -n "$LAST_DEV_TAG" ]; then
          COMMITS=$(git log ${LAST_DEV_TAG}..HEAD --oneline --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" --no-merges -10)
        fi
        
        # Count changes
        COMMIT_COUNT=$(echo "${COMMITS}" | wc -l)
        
        # Create simple changelog
        echo "## 🚧 Development Build #${{ steps.version.outputs.build-number }}" > release_notes.md
        echo "" >> release_notes.md
        echo "**Version:** \`${{ steps.version.outputs.dev-version }}\`" >> release_notes.md
        echo "**Commit:** [\`${{ steps.version.outputs.commit-short }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> release_notes.md
        echo "**Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Recent Changes (${COMMIT_COUNT} commits)" >> release_notes.md
        echo "${COMMITS}" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "1. Download the JAR file below" >> release_notes.md
        echo "2. Place it in your server's plugins folder" >> release_notes.md
        echo "3. Configure Discord bot token in config.yml" >> release_notes.md
        echo "4. Restart your server" >> release_notes.md
        echo "" >> release_notes.md
        echo "⚠️ This is a development build - use at your own risk!" >> release_notes.md
        
        # Set output
        {
          echo "changelog<<EOF"
          cat release_notes.md
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
    - name: Delete old development releases
      run: |
        # Keep only the last 5 dev releases
        gh release list --limit 100 | grep "dev-" | tail -n +6 | while read line; do
          tag=$(echo "$line" | awk '{print $1}')
          echo "Deleting old dev release: $tag"
          gh release delete "$tag" --yes || true
          git tag -d "$tag" || true
          git push origin :refs/tags/"$tag" || true
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create development release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: dev-${{ steps.version.outputs.build-number }}
        name: "🚧 Dev Build #${{ steps.version.outputs.build-number }} - ${{ steps.version.outputs.dev-version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: ${{ steps.artifact.outputs.artifact-path }}
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update development branch
      run: |
        # Tag the commit for future reference
        git tag -a "dev-${{ steps.version.outputs.build-number }}" -m "Development build ${{ steps.version.outputs.build-number }}"
        git push origin "dev-${{ steps.version.outputs.build-number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}